#include <stdio.h>
#include <cuda.h>
#include <sm_11_atomic_functions.h>
#include <cuComplex.h>
#include <cuda_runtime.h>

const int N=50000;
const int threadsPerBlock = 256;
const int blocksPerGrid = 84;

__global__ void initA(int *A, int N){
        int i=blockDim.x*blockIdx.x+threadIdx.x;
        if(i<N)  A[i]=1;
//      else{
//        if(i<N){

}

__global__ void Mult(int *A, int *C, int N)
{
        __shared__ int data[threadsPerBlock];
        int tid=threadIdx.x;
        int i=threadIdx.x+blockDim.x*blockIdx.x;

        data[tid]=0;

        while(i<N){
                data[tid]+=A[i];
                i+=blockDim.x*gridDim.x;
        }
        __syncthreads();
        for(int s=blockDim.x/2; s>0; s/=2){
          if(tid<s) data[tid]+=data[tid+s];
          __syncthreads();
        }
        if(tid==0) atomicAdd(&C[0],data[0]);

}


__host__ int main(void) {

        cudaError_t err = cudaSuccess;
        cudaEvent_t start, stop;

        size_t size = N * sizeof(int);
        size_t size_2 = N * N * sizeof(int);

        cudaEventCreate(&start);
        cudaEventCreate(&stop);


        int *h_C = (int *)malloc(size);

        int *d_A = NULL;
        err = cudaMalloc((void **)&d_A, size_2);
        if (err != cudaSuccess){
                printf("malloc_d_A error\n");
                return 0;
        }


        int *d_C= NULL;
        err = cudaMalloc((void **)&d_C,size);
        if (err != cudaSuccess){
                printf("malloc_d_C error\n");
                return 0;
        }

        initA<<<blocksPerGrid, threadsPerBlock>>>(d_A, N);

        cudaEventRecord(start,0);

        Mult<<<blocksPerGrid, threadsPerBlock>>>(d_A, d_C, N);
        err = cudaGetLastError();
        if (err != cudaSuccess){
                printf("MatAdd error\n");
                return 0;
        }

        cudaMemcpy(h_C, d_C, size, cudaMemcpyDeviceToHost);
        int as=(N/21504)*21504;
        printf("\n");
//      for(int i=1; i<N;i++) h_C[0]+=h_C[i];
        //printf("%d ",h_C[0]);
        printf("%d ",as);
        printf("\n");


        float Time=0.0f;
        cudaEventRecord(stop,0);
        cudaEventSynchronize(stop);
        cudaEventElapsedTime(&Time,start,stop);

        printf("Time: %.2f msec.",Time);

        err = cudaFree(d_A);
        //err = cudaFree(d_B);
        err = cudaFree(d_C);

        free(h_C);


        return 0;
}

