unit Un_TRG;

interface
  uses
  SysUtils, Classes, Graphics,Math,Windows, Messages, Controls, Forms, Dialogs,
  ComCtrls, ExtCtrls, ToolWin, StdCtrls, Buttons, ImgList, Menus;
   Const NNN=500;
   Type
      tRec=record X,Y:real end;
      tInt=record X,Y:integer end;
      tMas=array[1..NNN]of tRec;
      tMatrix=array[0..1,0..1] of real;

   var k:integer=0;
       SelK:integer=0;
       Mas,SelMas,OutMas:tMas;
       myMas:array[1..500] of tInt;
       KolPoints:integer;
       flPoints:Boolean=FALSE;
       flOutPoints:Boolean=FALSE;
       flOutAB:Boolean=FALSE;
       flRmin:Boolean=FALSE;
       flRmax:Boolean=FALSE;
       myDraw:boolean=False;
       myOk:boolean=false;
       myDrawAb:boolean=False;
       mySqr:boolean=false;
       A,b,c:boolean;
       UgA,UgC,UgB:real;
       Xc,Yc,Alpha,Xr,Yr,Xo,Yo,RMin,Rmax,Xp,Yp,MyX,MyY,Xd,Yd,Xd1,Yd1:real;
       Matrix :tMatrix;
       LX,LY,uo,vo:integer;
   procedure DrawPoints(TargetCanvas:TCanvas;Mas:tMas;K:integer;
                        SX,SY,u0,v0:integer;Color:TColor);
   procedure DrawTRG(TargetCanvas:TCanvas;
                        SX,SY,u0,v0:integer);
   procedure matrixRotate(var m: tMatrix; x:real);
   procedure ApplyMatToPoint(PointIn:TRec; var PointOut: TRec;
                          mat:tMatrix; Xc,Yc:real);
   procedure DrawOutTRG(TargetCanvas:TCanvas;
                        SX,SY,u0,v0:integer);
   procedure FindCross(P1,P2,P3,P4:TRec;var Xr,Yr:real);
   procedure FindAlphaA(P1,P2,P3:TRec;var Alpha:real);
   procedure MyDrawTRG(TargetCanvas:TCanvas;
                        SX,SY,u0,v0:integer);
   procedure MyDrawOutAB(TargetCanvas:TCanvas;
                        SX,SY,u0,v0:integer);
   procedure MyDrawRmin(TargetCanvas:TCanvas;
                        SX,SY,u0,v0:integer);
procedure MyDrawSqr(TargetCanvas:TCanvas;
                        SX,SY,u0,v0:integer);

implementation
   procedure FindAlphaA(P1,P2,P3:TRec;var Alpha:real);
      var b,c,a2,b2,c2,CA:real;
      begin
         a2:=SQR(P2.X-P3.X)+SQR(P2.Y-P3.Y);
         b2:=SQR(P1.X-P3.X)+SQR(P1.Y-P3.Y);
         c2:=SQR(P1.X-P2.X)+SQR(P1.Y-P2.Y);
         b:=SQRT(b2);  c:=SQRT(c2);
         CA:=(b2+c2-a2)/2/b/c;
         Alpha:=Arccos(CA);

      end;
   procedure FindCross(P1,P2,P3,P4:TRec;var Xr,Yr:real);
      var D1,D2,D3,Lam,Xa,Xb1,Xb,Xc,Ya,Yb1,Yb,Yc,rr:real;
      begin
         Xa:=P1.X;Xb1:=P2.X;Ya:=P1.Y;Yb1:=P2.Y;// A'B'
         Xb:=P3.X;Xc:=P4.X; Yb:=P3.Y;Yc:=P4.Y; // BC
         D1:=Ya-Yb1;D2:=Xb1-Xa;D3:=Xa*Yb1-Xb1*Ya;
         rr:= D1*(Xc-Xb)+D2*(Yc-Yb);
         if rr=0 then begin
             Xr:=Xc;Yr:=Ya;
         end   else begin
            Lam:=-(D3+Xb*D1+Yb*D2)/rr;
            Xr:=Xb+Lam*(Xc-Xb); Yr:=Yb+Lam*(Yc-Yb);
         end;
      end;
   procedure DrawOutTRG(TargetCanvas:TCanvas;
                        SX,SY,u0,v0:integer);
    var i,j,u1,v1,u2,v2:integer;
        cx,cy:real;
    begin

       with TargetCanvas do BEGIN
         Pen.Color:=clSilver;  cx:=SX;cy:=SY;
         Font.Color:=clBlack; Font.Name:='Small Fonts';
         Font.Size:=7;
         Brush.Color:=clWhite;
         Brush.Style:=bsSolid;
        for i:=1 to 3 do begin
            u1:= u0+round(Outmas[i].X*cx);
            v1:= v0-round(Outmas[i].Y*cy);
            j:=i+1;if j>3 then j:=1;
            u2:= u0+round(Outmas[j].X*cx);
            v2:= v0-round(Outmas[j].Y*cy);
            MoveTo(u1,v1);LineTo(u2,v2);
        end;
        for i:=1 to 3 do begin
            u1:= u0+round(Outmas[i].X*cx);
            v1:= v0-round(Outmas[i].Y*cy);
            Ellipse(u1-7,v1-7,u1+7,v1+7);
            TextOut(u1-4,v1-4,chr(Ord('A')+i-1));
        end;
       END;//with
    end;
   procedure matrixRotate(var m: tMatrix; x:real);
var
  sX,cX:real;

begin
  sX:=sin(x);cX:=cos(x);

  M[0,0]:=cX;   M[0,1]:=-sX;
  M[1,0]:=sX;   M[1,1]:=cX;

end;
   procedure ApplyMatToPoint(PointIn:TRec; var PointOut: TRec;
                          mat:tMatrix; Xc,Yc:real);
var
  x,y:real;
begin

  x:=((pointIn.x-Xc)*mat[0,0])+((PointIn.y-Yc)*mat[0,1]);
  y:=((pointIn.x-Xc)*mat[1,0])+((PointIn.y-Yc)*mat[1,1]);

   PointOut.x:=x+Xc;  PointOut.y:=y+Yc;
end;
   procedure DrawTRG(TargetCanvas:TCanvas;
                        SX,SY,u0,v0:integer);
    var i,j,u1,v1,u2,v2:integer;
        cx,cy:real;
        st:string;
    begin
       with TargetCanvas do BEGIN
         Pen.Color:=clBlack;(*Aqua*);  cx:=SX;cy:=SY;
         Font.Color:=clBlack; Font.Name:='Small Fonts';
         Font.Size:=7;
         Brush.Style:=bsClear;
         Brush.Style:=bsSolid;
         Brush.Color:=clWhite;
        for i:=1 to 3 do begin
            u1:= u0+round(Selmas[i].X*cx);

            v1:= v0-round(Selmas[i].Y*cy);
            j:=i+1;if j>3 then j:=1;
            u2:= u0+round(Selmas[j].X*cx);
            v2:= v0-round(Selmas[j].Y*cy); //MoveTo перемещает указатель в точку с X и Y
            MoveTo(u1,v1);LineTo(u2,v2);   //LineTo рисует линию от указателя до X и  Y
        end;
        Xc:=0;Yc:=0;
        for i:=1 to 3 do begin
            u1:= u0+round(Selmas[i].X*cx);        //координаты вершин
            v1:= v0-round(Selmas[i].Y*cy);
            Xc:=Xc+Selmas[i].X / 3;
            Yc:=Yc+Selmas[i].Y / 3;
            Ellipse(u1-7,v1-7,u1+7,v1+7);        // кружки вокруг вершин
            TextOut(u1-4,v1-4,chr(Ord('A')+i-1));      //имена вершин
        end;
        Brush.Color:=clRed;
        u1:= u0+round(Xc*cx);          //вычисялем координаты центра
        v1:= v0-round(Yc*cy);
        Ellipse(u1-3,v1-3,u1+3,v1+3);  //центр
       END;//with
    end;
//------------------------------
       procedure MyDrawTRG(TargetCanvas:TCanvas;
                        SX,SY,u0,v0:integer);
    var i,j,u1,v1,u2,v2:integer;
        cx,cy:real;
        st:string;
    begin
       with TargetCanvas do BEGIN
         Pen.Color:=clBlack;(*Aqua*);  cx:=SX;cy:=SY;
         Font.Color:=clBlack; Font.Name:='Small Fonts';
         Font.Size:=7;
         Brush.Color:=clWhite;
        for i:=1 to 2 do begin
            u1:= MyMas[i].X;
            v1:= MyMas[i].Y;
            u2:= MyMas[i+1].X;
            v2:= MyMas[i+1].Y; //MoveTo перемещает указатель в точку с X и Y
            MoveTo(u1,v1);LineTo(u2,v2);   //LineTo рисует линию от указателя до X и  Y
        end;
        MoveTo(u2,v2);LineTo(MyMas[1].X,MyMas[1].Y);
        Xc:=0;Yc:=0;
        for i:=1 to 3 do begin
            u1:= MyMas[i].X;        //координаты вершин
            v1:= MyMas[i].Y;
            Ellipse(u1-7,v1-7,u1+7,v1+7);        // кружки вокруг вершин
            TextOut(u1-4,v1-4,chr(Ord('A')+i-1));      //имена вершин
        end;
        Brush.Color:=clRed;
        u1:= u0+round(Xc*cx);          //вычисялем координаты центра
        v1:= v0-round(Yc*cy);
        Ellipse(u1-3,v1-3,u1+3,v1+3);  //центр
       END;//with
    end;

procedure MyDrawOutAB(TargetCanvas:TCanvas;
                        SX,SY,u0,v0:integer);
    var i,j,u1,v1,u2,v2:integer;
        cx,cy:real;
        st,st1:string;
    begin
       with TargetCanvas do BEGIN
         Pen.Color:=clSilver;  cx:=SX;cy:=SY;
         Font.Color:=clBlack; Font.Name:='Small Fonts';
         Font.Size:=7;
         Brush.Style:=bsClear;
         Brush.Color:=clNavy;
            Pen.Style:=psDot;

            if a then begin
           // ShowMessage('A');
              u1:= u0+round(Selmas[1].X*cx);
              v1:= v0-round(Selmas[1].Y*cy);
              u2:=u0+round(MyX*cx);
              v2:=v0-round(MyY*cy);
              MoveTo(u1,v1);LineTo(u2,v2);
            end;
            if b then begin
           // ShowMessage('B');
              u1:= u0+round(Selmas[2].X*cx);
              v1:= v0-round(Selmas[2].Y*cy);
              u2:=u0+round(MyX*cx);
              v2:=v0-round(MyY*cy);
              MoveTo(u1,v1);LineTo(u2,v2);
            end;

            if c then begin
          //  ShowMessage('C');
              u1:= u0+round(Selmas[3].X*cx);
              v1:= v0-round(Selmas[3].Y*cy);
              u2:=u0+round(MyX*cx);
              v2:=v0-round(MyY*cy);
              MoveTo(u1,v1);LineTo(u2,v2);
            end;

        Pen.Style:=psSolid;
        Brush.Color:=clWhite;
            Ellipse(u2-7,v2-7,u2+7,v2+7);
            TextOut(u2-4,v2-4,chr(Ord('D')));

        Ellipse(u2-3,v2-3,u2+3,v2+3);

        Brush.Style:=bsSolid;

       END;//with
    end;

procedure MyDrawRmin(TargetCanvas:TCanvas;
                        SX,SY,u0,v0:integer);
var i,j,r1,r2,u1,v1,u2,v2,cx,cy,c1x,c2x,c1y,c2y,u5,v5:integer;
    st,st1:string;
    a1,b1,c1,p:real;
    begin
       with TargetCanvas do BEGIN
         Pen.Color:=clSilver;  cx:=SX;cy:=SY;
         Font.Color:=clBlack; Font.Name:='Small Fonts';
         Font.Size:=7;
         Brush.Color:=clFuchsia;
            Brush.Style:=bsClear;
            if a then begin
              u1:= u0+round(Selmas[1].X*cx);
              v1:= v0-round(Selmas[1].Y*cy);
              u2:= u0+round(Selmas[2].X*cx);
              v2:= v0-round(Selmas[2].Y*cy);
              a1:=sqrt(sqr(u2-u1)+sqr(v2-v1));


              u1:= u0+round(Selmas[2].X*cx);
              v1:= v0-round(Selmas[2].Y*cy);
              u2:= u0+round(MyX*cx);
              v2:= v0-round(MyY*cy);
              b1:=sqrt(sqr(u2-u1)+sqr(v2-v1));


              u1:= u0+round(MyX*cx);
              v1:= v0-round(MyY*cy);
              u2:= u0+round(Selmas[1].X*cx);
              v2:= v0-round(Selmas[1].Y*cy);
              c1:=sqrt(sqr(u2-u1)+sqr(v2-v1));
              p:=(a1+b1+c1)/2;
              r1:=round(sqrt(abs(((p-a1)*(p-b1)*(p-c1))/(p)))) ;

              u1:= u0+round(Selmas[1].X*cx);
              v1:= v0-round(Selmas[1].Y*cy);
              u2:= u0+round(Selmas[3].X*cx);
              v2:= v0-round(Selmas[3].Y*cy);
              a1:=sqrt(sqr(u2-u1)+sqr(v2-v1));


              u1:= u0+round(Selmas[3].X*cx);
              v1:= v0-round(Selmas[3].Y*cy);
              u2:= u0+round(MyX*cx);
              v2:= v0-round(MyY*cy);
              b1:=sqrt(sqr(u2-u1)+sqr(v2-v1));

              p:=(a1+b1+c1)/2;
              r2:=round(sqrt(abs(((p-a1)*(p-b1)*(p-c1))/(p)))) ;


            end;
            if b then begin
              u1:= u0+round(Selmas[2].X*cx);
              v1:= v0-round(Selmas[2].Y*cy);
              u2:= u0+round(Selmas[3].X*cx);
              v2:= v0-round(Selmas[3].Y*cy);
              a1:=sqrt(sqr(u2-u1)+sqr(v2-v1));


              u1:= u0+round(Selmas[3].X*cx);
              v1:= v0-round(Selmas[3].Y*cy);
              u2:= u0+round(MyX*cx);
              v2:= v0-round(MyY*cy);
              b1:=sqrt(sqr(u2-u1)+sqr(v2-v1));


              u1:= u0+round(MyX*cx);
              v1:= v0-round(MyY*cy);
              u2:= u0+round(Selmas[2].X*cx);
              v2:= v0-round(Selmas[2].Y*cy);
              c1:=sqrt(sqr(u2-u1)+sqr(v2-v1));
              p:=(a1+b1+c1)/2;
              r1:=round(sqrt(abs(((p-a1)*(p-b1)*(p-c1))/(p)))) ;

              u1:= u0+round(Selmas[2].X*cx);
              v1:= v0-round(Selmas[2].Y*cy);
              u2:= u0+round(Selmas[1].X*cx);
              v2:= v0-round(Selmas[1].Y*cy);
              a1:=sqrt(sqr(u2-u1)+sqr(v2-v1));


              u1:= u0+round(Selmas[1].X*cx);
              v1:= v0-round(Selmas[1].Y*cy);
              u2:= u0+round(MyX*cx);
              v2:= v0-round(MyY*cy);
              b1:=sqrt(sqr(u2-u1)+sqr(v2-v1));

              p:=(a1+b1+c1)/2;
              r2:=round(sqrt(abs(((p-a1)*(p-b1)*(p-c1))/(p)))) ;
            end;

            if c then begin
              u1:= u0+round(Selmas[3].X*cx);
              v1:= v0-round(Selmas[3].Y*cy);
              u2:= u0+round(Selmas[1].X*cx);
              v2:= v0-round(Selmas[1].Y*cy);
              a1:=sqrt(sqr(u2-u1)+sqr(v2-v1));


              u1:= u0+round(Selmas[1].X*cx);
              v1:= v0-round(Selmas[1].Y*cy);
              u2:= u0+round(MyX*cx);
              v2:= v0-round(MyY*cy);
              b1:=sqrt(sqr(u2-u1)+sqr(v2-v1));


              u1:= u0+round(MyX*cx);
              v1:= v0-round(MyY*cy);
              u2:= u0+round(Selmas[3].X*cx);
              v2:= v0-round(Selmas[3].Y*cy);
              c1:=sqrt(sqr(u2-u1)+sqr(v2-v1));
              p:=(a1+b1+c1)/2;
              r1:=round(sqrt(abs(((p-a1)*(p-b1)*(p-c1))/(p)))) ;

              u1:= u0+round(Selmas[3].X*cx);
              v1:= v0-round(Selmas[3].Y*cy);
              u2:= u0+round(Selmas[2].X*cx);
              v2:= v0-round(Selmas[2].Y*cy);
              a1:=sqrt(sqr(u2-u1)+sqr(v2-v1));


              u1:= u0+round(Selmas[2].X*cx);
              v1:= v0-round(Selmas[2].Y*cy);
              u2:= u0+round(MyX*cx);
              v2:= v0-round(MyY*cy);
              b1:=sqrt(sqr(u2-u1)+sqr(v2-v1));

              p:=(a1+b1+c1)/2;
              r2:=round(sqrt(abs(((p-a1)*(p-b1)*(p-c1))/(p)))) ;


            end;

            c1x:= u0+round(Xd*cx);
            c1y:= v0-round(Yd*cy);      //центр

            Brush.Color:=clRed;
            Ellipse(c1x-3,c1y-3,c1x+3,c1y+3);
            Brush.Style:=bsClear;
            Ellipse(c1x-r1-1,c1y-r1-1,c1x+r1+1,c1y+r1+1);


            c1x:= u0+round(Xd1*cx);
            c1y:= v0-round(Yd1*cy);      //центр

            Brush.Color:=clRed;
            Ellipse(c1x-3,c1y-3,c1x+3,c1y+3);
            Brush.Style:=bsClear;
            Ellipse(c1x-r2-1,c1y-r2-1,c1x+r2+1,c1y+r2+1);

            Brush.Style:=bsSolid;
       END;//with
      end;

 procedure MyDrawSqr(TargetCanvas:TCanvas;
                        SX,SY,u0,v0:integer);
   var i,j,u1,v1,u2,v2,l:integer;
        cx,cy:real;
        st:string;
 begin
       with TargetCanvas do BEGIN
         Pen.Color:=clSilver;  cx:=SX;cy:=SY;
         Font.Color:=clBlack; Font.Name:='Small Fonts';
         Font.Size:=7;
         Brush.Style:=bsClear;
         Brush.Color:=clNavy;
         Pen.Style:=psDot;

         u1:= u0+round(Xd*cx);          //Линия соединит радиусы
         v1:= v0-round(Yd*cy);
         u2:=u0+round(Xd1*cx);
         v2:=v0-round(Yd1*cy);
         MoveTo(u1,v1);LineTo(u2,v2);

         l:=round(sqrt(sqr(u2-u1)+sqr(v2-v1)));

        MoveTo(u1,v1);LineTo(u1,v2);
        MoveTo(u2,v2);LineTo(u2,v1);

         Pen.Style:=psSolid;
        Brush.Color:=clWhite;
        Brush.Style:=bsSolid;


       END;//with
    end;


//------------------------
   procedure DrawPoints(TargetCanvas:TCanvas;Mas:tMas;K:integer;
                        SX,SY,u0,v0:integer;Color:TColor);
   var i,u1,v1,u2,v2:integer;
       cx,cy:real;
   begin
      with TargetCanvas do BEGIN
         Brush.Color:=Color;
         cx:=SX;cy:=SY;
         for i:=1 to K do begin
            u1:= u0+round(mas[i].X*cx);
            v1:= v0-round(mas[i].Y*cy);
            Ellipse(u1-4,v1-4,u1+4,v1+4);
         end;
      END;//with
   end;
end.
